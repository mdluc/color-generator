{"version":3,"sources":["SingleColor.js","App.js","index.js"],"names":["SingleColor","rgb","weight","hex","index","type","gradation","useState","alert","setAlert","bcg","join","hexValue","useEffect","timeout","setTimeout","clearTimeout","className","style","backgroundColor","onClick","navigator","clipboard","writeText","App","color","setColor","show","setShow","setGradation","Values","all","list","setList","setError","Container","fluid","Row","Form","onSubmit","e","preventDefault","isNaN","toString","colors","error","Group","Label","Control","value","onChange","event","target","parseInt","placeholder","Button","id","Modal","onHide","size","Header","closeButton","margin","fontSize","Title","Body","map","Col","md","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA+BeA,EA9BK,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,IAAKC,EAA0C,EAA1CA,OAAeC,GAA2B,EAAlCC,MAAkC,EAA3BD,KAAgBE,GAAW,EAAtBC,UAAsB,EAAXD,MACzD,EAA0BE,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAMT,EAAIU,KAAK,KACfC,EAAQ,WAAOT,GAcrB,OAPAU,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBN,GAAS,KACR,KACH,OAAO,kBAAMO,aAAaF,MACzB,CAACN,IAGF,0BACES,UAAS,gBAAmB,UAAPZ,GAAyB,SAAPA,EAAe,cAAc,eACpEa,MAAO,CAAEC,gBAAgB,OAAD,OAAST,EAAT,MACxBU,QAhBgB,WAClBX,GAAS,GACTY,UAAUC,UAAUC,UAAUX,IAW9B,UAKE,oBAAGK,UAAU,gBAAb,UAA8Bf,EAA9B,OACA,mBAAGe,UAAU,cAAb,SAA4BL,IAC3BJ,GAAS,mBAAGS,UAAS,gBAAmB,UAAPZ,GAAyB,SAAPA,EAAe,cAAc,eAAvE,qC,iFCkFDmB,MAhGf,WACE,MAA0BjB,mBAAS,WAAnC,mBAAOkB,EAAP,KAAcC,EAAd,KACA,EAAwBnB,oBAAS,GAAjC,mBAAOoB,EAAP,KAAaC,EAAb,KACA,EAAkCrB,mBAAS,IAA3C,mBAAOD,EAAP,KAAkBuB,EAAlB,KACA,EAAwBtB,mBAAS,IAAIuB,IAAO,WAAWC,IAAIzB,IAA3D,mBAAO0B,EAAP,KAAaC,EAAb,KACA,EAA0B1B,oBAAS,GAAnC,mBAAc2B,GAAd,WAoCA,OACE,mCACE,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,eAACC,EAAA,EAAD,WACA,yDAEA,eAACC,EAAA,EAAD,CAAMrB,UAAU,QAAQsB,SAzBT,SAACC,GACpBA,EAAEC,iBACF,IACE,GACEC,MAAMpC,IACNA,EAAY,GACZA,EAAY,KACa,KAAzBA,EAAUqC,WAEVf,GAAQ,OACH,CACL,IAAIgB,EAAS,IAAId,IAAOL,GAAOM,IAAIzB,GACnC2B,EAAQW,IAEV,MAAMC,GACNX,GAAS,KAUP,UACE,eAACI,EAAA,EAAKQ,MAAN,WACE,cAACR,EAAA,EAAKS,MAAN,qDAEA,cAACT,EAAA,EAAKU,QAAN,CACE3C,KAAK,SACL4C,MAAO3C,EACP4C,SAzCkB,SAACC,GAC7B,IAAMF,EAAQE,EAAMC,OAAOH,MACb,MAAVA,EACFrB,GAAQ,GAERC,EAAawB,SAASJ,KAqCdK,YAAY,cAGhB,cAAChB,EAAA,EAAKU,QAAN,CACE3C,KAAK,QACL4C,MAAOxB,EACPyB,SApDgB,SAACC,GACzBzB,EAASyB,EAAMC,OAAOH,UAsDhB,cAACM,EAAA,EAAD,CAAQlD,KAAK,SAASmD,GAAG,cAAzB,sBAGA,eAACC,EAAA,EAAD,CACE9B,KAAMA,EACN+B,OA9DU,kBAAM9B,GAAQ,IA+DxB+B,KAAK,KACL1C,UAAU,gBAJZ,UAME,eAACwC,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,UACE,cAAC,IAAD,CAAmB3C,MAAO,CAAC4C,OAAO,OAAOC,SAAS,UAClD,cAACN,EAAA,EAAMO,MAAP,qBAAkC,OAEpC,cAACP,EAAA,EAAMQ,KAAP,gFAON,cAAC5B,EAAA,EAAD,UACGL,EAAKkC,KAAI,SAACzC,EAAOrB,GAChB,OACE,cAAC+D,EAAA,EAAD,CAAKC,GAAI,EAAIZ,GAAG,SAAhB,SAAyB,cAAC,EAAD,2BAA6B/B,GAA7B,IAAoCrB,MAAOA,EAAOD,IAAKsB,EAAMtB,MAA3CC,gBC9FvDiE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.68f03c0a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nconst SingleColor = ({ rgb, weight, index, hex, gradation, type }) => {\n  const [alert, setAlert] = useState(false);\n  const bcg = rgb.join(\",\");\n  const hexValue = `#${hex}`;\n\n  const handleClick = () => {\n    setAlert(true);\n    navigator.clipboard.writeText(hexValue);\n  };\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setAlert(false);\n    }, 1000);\n    return () => clearTimeout(timeout);\n  }, [alert]);\n\n  return (\n    <article\n      className={`color ${(type===\"shade\" || type===\"base\")?\"color-light\":\"color-black\"}`}\n      style={{ backgroundColor: `rgb(${bcg})` }}\n      onClick={handleClick}\n    >\n      <p className=\"percent-value\">{weight}%</p>\n      <p className=\"color-value\">{hexValue}</p>\n      {alert && <p className={`alert ${(type===\"shade\" || type===\"base\")?\"color-light\":\"color-black\"}`}>copied to clipboard</p>}\n    </article>\n  );\n};\n\nexport default SingleColor;\n","import React, { useState } from \"react\";\nimport SingleColor from \"./SingleColor\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Values from 'values.js';\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\"\nimport {AiFillCloseCircle} from \"react-icons/ai\"\n\nfunction App() {\n  const [color, setColor] = useState(\"#41609b\"); //default color\n  const [show, setShow] = useState(false); //state used for showing the error modal\n  const [gradation, setGradation] = useState(\"\"); //state used for setting the level of gradation for each type tint/shade\n  const [list, setList] = useState(new Values(\"#41609b\").all(gradation)); //state used for listing all the colors using the values.js library\n  const [error, setError] = useState(false);\n  \n  const handleClose = () => setShow(false);\n\n  const handleChangeColor = (event) => {\n    setColor(event.target.value);\n  };\n\n  const handleChangeGradation = (event) => {\n    const value = event.target.value;\n    if (value === \"0\") {\n      setShow(true);\n    } else {\n      setGradation(parseInt(value));\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    try {\n      if (\n        isNaN(gradation) ||\n        gradation < 1 ||\n        gradation > 100 ||\n        gradation.toString() === \"\"\n      ) {\n        setShow(true);\n      } else {\n        let colors = new Values(color).all(gradation);\n        setList(colors);\n      }\n    } catch(error){\n      setError(true)\n    }\n  };\n\n  return (\n    <>\n      <Container fluid>\n        <Row>\n        <h3>color generator project</h3>\n\n        <Form className=\"forms\" onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Enter the level of gradation you want:</Form.Label>\n\n            <Form.Control\n              type=\"number\"\n              value={gradation}\n              onChange={handleChangeGradation}\n              placeholder=\"ex: 10\"\n            />\n          </Form.Group>\n          <Form.Control\n            type=\"color\"\n            value={color}\n            onChange={handleChangeColor}\n          />\n\n          <Button type=\"submit\" id=\"btn-styling\">\n            GENERATE\n          </Button>\n          <Modal\n            show={show}\n            onHide={handleClose}\n            size=\"md\"\n            className=\"modal-styling\"\n          >\n            <Modal.Header closeButton>\n              <AiFillCloseCircle style={{margin:\"10px\",fontSize:\"25px\"}}/>\n              <Modal.Title>ERROR!</Modal.Title>{\" \"}\n            </Modal.Header>\n            <Modal.Body>\n              Out of range value. Please add a value between [1 - 100]\n            </Modal.Body>\n          </Modal>\n        </Form>\n        </Row>\n     \n      <Row>\n        {list.map((color, index) => {\n          return (\n            <Col md={3}  id=\"colors\"><SingleColor key={index} {...color} index={index} hex={color.hex} /></Col>\n          );\n        })}\n      </Row>\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}